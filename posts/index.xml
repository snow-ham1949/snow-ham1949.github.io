<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 隨寫日誌</title><link>https://snow-ham1949.github.io/posts/</link><description>Recent content in Posts on 隨寫日誌</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Erin Li</copyright><lastBuildDate>Fri, 05 Apr 2024 11:28:52 +0800</lastBuildDate><atom:link href="https://snow-ham1949.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Test</title><link>https://snow-ham1949.github.io/posts/test/</link><pubDate>Fri, 05 Apr 2024 11:28:52 +0800</pubDate><guid>https://snow-ham1949.github.io/posts/test/</guid><description>這是二號標題 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int main() { cout &amp;lt;&amp;lt; &amp;#34;Hello world!\n&amp;#34;; } hexo c hexo g hexo d mathjax $x + y = z$</description></item><item><title>112-1 修課心得</title><link>https://snow-ham1949.github.io/posts/112-1-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</link><pubDate>Thu, 04 Apr 2024 16:19:49 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/112-1-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</guid><description>修的課程 資訊系必修：自動機與形式語言、計算機結構 資訊系選修：三維電腦視覺與深度學習應用 自動機與形式語言 開課教授：林忠緯 涼度：2/5 甜度：4/</description></item><item><title>浮點數二分搜技巧</title><link>https://snow-ham1949.github.io/posts/%E6%B5%AE%E9%BB%9E%E6%95%B8%E4%BA%8C%E5%88%86%E6%90%9C%E6%8A%80%E5%B7%A7/</link><pubDate>Mon, 04 Sep 2023 21:49:45 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/%E6%B5%AE%E9%BB%9E%E6%95%B8%E4%BA%8C%E5%88%86%E6%90%9C%E6%8A%80%E5%B7%A7/</guid><description>今天寫了這題才知道原來浮點數二分搜要這樣寫。 原本我以為應該是要根據他想要的浮點數誤誤差當作 eps，然後寫成這樣 while (r - l &amp;gt; eps) { do binary search } 但那樣的</description></item><item><title>Atcoder Beginner Contest 315 題解</title><link>https://snow-ham1949.github.io/posts/atcoder-beginner-contest-315-%E9%A1%8C%E8%A7%A3/</link><pubDate>Sun, 20 Aug 2023 21:42:01 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/atcoder-beginner-contest-315-%E9%A1%8C%E8%A7%A3/</guid><description>A - tcdr 直接跳過 aeiou 輸出就好 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; typedef pair&amp;lt;int, int&amp;gt; pii; typedef pair&amp;lt;ll, ll&amp;gt; pll; #define SZ(a) (int)(a).size() #define ALL(v) (v).begin(), (v).end() #define X first #define Y second #define dbg(x) cerr &amp;lt;&amp;lt; #x &amp;lt;&amp;lt; &amp;#34; = &amp;#34; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl; void solve() { string s; cin &amp;gt;&amp;gt; s; for (int i = 0; s[i]; i++)</description></item><item><title>Atcoder Beginner Contest 312 題解</title><link>https://snow-ham1949.github.io/posts/atcoder-beginner-contest-312-%E9%A1%8C%E8%A7%A3/</link><pubDate>Thu, 17 Aug 2023 21:57:46 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/atcoder-beginner-contest-312-%E9%A1%8C%E8%A7%A3/</guid><description>A - Chord 判斷一下就好了。 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; typedef pair&amp;lt;int, int&amp;gt; pii; typedef pair&amp;lt;ll, ll&amp;gt; pll; #define SZ(a) (int)(a).size() #define ALL(v) (v).begin(), (v).end() #define X first #define Y second #define dbg(x) cerr &amp;lt;&amp;lt; #x &amp;lt;&amp;lt; &amp;#34; = &amp;#34; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl; string ss[7] = {&amp;#34;ACE&amp;#34;, &amp;#34;BDF&amp;#34;, &amp;#34;CEG&amp;#34;, &amp;#34;DFA&amp;#34;, &amp;#34;EGB&amp;#34;, &amp;#34;FAC&amp;#34;, &amp;#34;GBD&amp;#34;}; void solve() { string s; cin</description></item><item><title>Atcoder Beginner Contest 313 題解</title><link>https://snow-ham1949.github.io/posts/atcoder-beginner-contest-313-%E9%A1%8C%E8%A7%A3/</link><pubDate>Wed, 16 Aug 2023 19:59:22 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/atcoder-beginner-contest-313-%E9%A1%8C%E8%A7%A3/</guid><description>A - To be Saikyo 直接找最大的是多少就好，注意要特判一下如果第一個就是最大的且沒有人跟他一樣大就不用加，不然還是要 +1。 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; typedef pair&amp;lt;int, int&amp;gt; pii; typedef</description></item><item><title>Atcoder Beginner Contest 314 題解</title><link>https://snow-ham1949.github.io/posts/atcoder-beginner-contest-314-%E9%A1%8C%E8%A7%A3/</link><pubDate>Mon, 14 Aug 2023 21:36:48 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/atcoder-beginner-contest-314-%E9%A1%8C%E8%A7%A3/</guid><description>A - 3.14 直接複製一下題目然後輸出就好了 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; typedef pair&amp;lt;int, int&amp;gt; pii; typedef pair&amp;lt;ll, ll&amp;gt; pll; #define SZ(a) (int)(a).size() #define ALL(v) (v).begin(), (v).end() #define X first #define Y second #define dbg(x) cerr &amp;lt;&amp;lt; #x &amp;lt;&amp;lt; &amp;#34; = &amp;#34; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl; string pi = &amp;#34;3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679&amp;#34;; void solve() { int n;</description></item><item><title>二分搜技巧</title><link>https://snow-ham1949.github.io/posts/%E4%BA%8C%E5%88%86%E6%90%9C%E6%8A%80%E5%B7%A7/</link><pubDate>Sun, 06 Aug 2023 19:38:47 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/%E4%BA%8C%E5%88%86%E6%90%9C%E6%8A%80%E5%B7%A7/</guid><description>上次團練的時候被學長建議了這種寫法，所以記錄一下。以往我都是寫 while (l &amp;lt; r) { int m = (l + r) &amp;gt;&amp;gt; 1; if (chk(m)) r = m; else l = m + 1; } 但有時候就會搞不清楚自己到底</description></item><item><title>111-2 修課心得</title><link>https://snow-ham1949.github.io/posts/111-2-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</link><pubDate>Wed, 12 Jul 2023 23:09:37 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/111-2-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</guid><description>修的課程 資訊系必修：人工智慧導論、計算機網路實驗 資訊系選修：數位視覺效果、巨量資料系統之應用 通識：森林醫學點線面 人工智慧導論 開課教授：陳尚澤</description></item><item><title>nginx &amp; certbot 紀錄</title><link>https://snow-ham1949.github.io/posts/nginx-certbot-%E7%B4%80%E9%8C%84/</link><pubDate>Thu, 25 May 2023 14:11:22 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/nginx-certbot-%E7%B4%80%E9%8C%84/</guid><description>之前在 appworks 的時候直接用了朋友推薦的這個 docker image，直接把 nginx 跟 certbot 打包好給你，只要寫少少的 .conf 就可以了。不過這次在寫 CNL 的期末專案的時候，組員寫的 html</description></item><item><title>111-1 修課心得</title><link>https://snow-ham1949.github.io/posts/111-1-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</link><pubDate>Thu, 16 Feb 2023 20:02:41 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/111-1-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</guid><description>修的課程 資訊系必修：系統程式設計、專題研究、計算機網路 資訊系選修：數位聲音藝術與創作 通識：海洋科學概論 系統程式設計 開課教授：鄭卜壬 涼度：5/</description></item><item><title>Codeforces 1635D. Infinite Set</title><link>https://snow-ham1949.github.io/posts/codeforces-1635d-infinite-set/</link><pubDate>Mon, 24 Oct 2022 21:57:08 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/codeforces-1635d-infinite-set/</guid><description>這題好難，我看了好多遍別人的題解才懂 QwQ 題目 給一個陣列，考慮一個無限的集合 $S$ 由符合以下條件之一的 $x$ 構成 $x = a[i]$ $x = 2 * y + 1$ and $y \in S$ $x = 4 * y$ and</description></item><item><title>Stoer Wagner Min Cut 演算法</title><link>https://snow-ham1949.github.io/posts/stoer-wagner-min-cut-%E6%BC%94%E7%AE%97%E6%B3%95/</link><pubDate>Fri, 07 Oct 2022 22:24:23 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/stoer-wagner-min-cut-%E6%BC%94%E7%AE%97%E6%B3%95/</guid><description>定義 給一個無向連通圖，去掉一個邊集合之後可以使得圖變成兩個連通分量，這個邊集合就叫做割集。 最小割的意思就是找到一個權重和最小的割集。 Stoer Wagner 演算</description></item><item><title>NEOJ 513 超大螢幕設置</title><link>https://snow-ham1949.github.io/posts/neoj-513-%E8%B6%85%E5%A4%A7%E8%9E%A2%E5%B9%95%E8%A8%AD%E7%BD%AE/</link><pubDate>Tue, 04 Oct 2022 15:20:17 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/neoj-513-%E8%B6%85%E5%A4%A7%E8%9E%A2%E5%B9%95%E8%A8%AD%E7%BD%AE/</guid><description>題目 link 作法 是單調隊列的經典題目，只是這題變成要往左往右看，看到第一個比它小的就停止，這樣就會知道以它的高度設置螢幕的話最寬能夠到多少。這邊用</description></item><item><title>CSES Josephus Queries</title><link>https://snow-ham1949.github.io/posts/cses-josephus-queries/</link><pubDate>Mon, 03 Oct 2022 22:39:07 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/cses-josephus-queries/</guid><description>題目 給 $n$ 個圍成一圈的小孩，每 2 個人就移掉 2 個人中的第二個，問第 $k$ 個小孩被移掉的編號 作法 這題網路上有很多題解，我看的懂 tutorial 但實作都看不懂所以寫一</description></item><item><title>CSES Tree Matching</title><link>https://snow-ham1949.github.io/posts/cses-tree-matching/</link><pubDate>Mon, 19 Sep 2022 21:51:48 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/cses-tree-matching/</guid><description>第一次接觸樹 dp OuO 題目 給一棵樹，找到最大的邊集合使得任兩邊不共享一個點，輸出集合大小。 作法 定義 如果是 array 版本的話（i.e. 給一個序列不能選相鄰的</description></item><item><title>CSES List Removals</title><link>https://snow-ham1949.github.io/posts/cses-list-removals/</link><pubDate>Sun, 18 Sep 2022 19:18:46 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/cses-list-removals/</guid><description>題目 給定一個長度為 $n$ 的序列 $a$，給 $n$ 個詢問，對於每個詢問 $pos$，輸出位置為 $pos$ 的值並從序列中刪除。 作法 這題的技巧要用到「BIT 上二分搜」</description></item><item><title>CSES Hotel Queries</title><link>https://snow-ham1949.github.io/posts/cses-hotel-queries/</link><pubDate>Sat, 17 Sep 2022 23:13:51 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/cses-hotel-queries/</guid><description>題目 給一個序列 $a$，對於每個詢問 $x$ 找到最小的 $i$ 使得 $a[i] &amp;gt;= x$，並將 $a[i] -= x$。 作法 這題要用到的技巧是線段樹二分搜。 線段樹的每個節點可以存「節點</description></item><item><title>Sparse Table</title><link>https://snow-ham1949.github.io/posts/sparse-table/</link><pubDate>Sun, 04 Sep 2022 22:13:25 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/sparse-table/</guid><description>能幹嘛 區間最小/最大查詢，利用可以把區間拆成 $\log_2(\text{區間長度})$ 個長度為 2 的冪次的區間，達到 $O(N\log(N))$ pre-build, $O(1)$ 查詢。 （區間和查詢也</description></item><item><title>Atcoder DP contest (持續更新中)</title><link>https://snow-ham1949.github.io/posts/atcoder-dp-contest/</link><pubDate>Sun, 28 Aug 2022 19:12:56 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/atcoder-dp-contest/</guid><description>紀錄一下自己練習 dp 的過程，最近在寫 icpc 培訓班的作業感受到自己的 dp 實在是太爛了&amp;hellip; 剛好被推薦有這個題單可以練習，所以就順便把自己不會</description></item><item><title>2022 IONC</title><link>https://snow-ham1949.github.io/posts/2022-ionc/</link><pubDate>Wed, 27 Jul 2022 14:35:20 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/2022-ionc/</guid><description>大學生混進高中競程營隊裝年輕（Ｘ 一開始來的時候目標是想要練刷題，結果剛好被朋友推坑去 icpc 培訓班 hw0.514，所以就希望這次營隊能多學一點，看</description></item><item><title>TIOJ 1882. pC. 最暖的冬天</title><link>https://snow-ham1949.github.io/posts/tioj-1882-pc-%E6%9C%80%E6%9A%96%E7%9A%84%E5%86%AC%E5%A4%A9/</link><pubDate>Sat, 23 Jul 2022 21:26:51 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/tioj-1882-pc-%E6%9C%80%E6%9A%96%E7%9A%84%E5%86%AC%E5%A4%A9/</guid><description>題目 link 作法 純純的三分搜，只是我一開始沒看懂題目就開始亂寫，然後又在「求出 $L(x)$ 這部分卡住」，後來學長開導（？）我之後才知道其實就是在三分搜的時候</description></item><item><title>Codeforces 986B. Petr and Permutations</title><link>https://snow-ham1949.github.io/posts/codeforces-986b-petr-and-permutations/</link><pubDate>Fri, 22 Jul 2022 13:54:14 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/codeforces-986b-petr-and-permutations/</guid><description>題目 有一個陣列 ${1, 2, &amp;hellip;, N}, (N \leq 10^6)$，Petr 喜歡對序列執行 $3n$ 次任取兩個數字交換的操作，Um_nik 喜歡做 $7n + 1$ 次，給定一個操作後的陣列，</description></item><item><title>Leetcode 792. Number of Matching Subsequences</title><link>https://snow-ham1949.github.io/posts/leetcode-792-number-of-matching-subsequences/</link><pubDate>Wed, 20 Jul 2022 14:07:36 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/leetcode-792-number-of-matching-subsequences/</guid><description>試著記得每次都要寫複雜度（？ 題目 link 作法 一開始看到 tag 以為真的要寫 trie，後來才發現不用（用 trie 我也不會寫），用二分搜就可以了。 概念是先去紀錄 s</description></item><item><title>Leetcode 629. K Inverse Pairs Array</title><link>https://snow-ham1949.github.io/posts/leetcode-629-k-inverse-pairs-array/</link><pubDate>Sun, 17 Jul 2022 21:27:49 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/leetcode-629-k-inverse-pairs-array/</guid><description>題目 link 作法 $O(nk^2)$ 我以為會 TLE 然後剛剛測發現其實不會 QQ，可以定義 $dp[i][j]$ 是使用 1 ~ $i$ 的數字後，可以構成 $j$ 個 inversion pair 的數量，那答案就會是 $dp[n][k]$。</description></item><item><title>Leetcode 2305. Fair Distribution of Cookies</title><link>https://snow-ham1949.github.io/posts/leetcode-2305-fair-distribution-of-cookies/</link><pubDate>Thu, 14 Jul 2022 17:07:07 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/leetcode-2305-fair-distribution-of-cookies/</guid><description>題目 link 作法 bit manipulation + dp 這題跟 這題 蠻像的，不過這次是要盡可能平均分然後輸出這樣分以後一個小孩最多可能拿到的餅乾數。 我一開始想跟 698 那題一樣做，不過這</description></item><item><title>Leetcode 698. Partition to K Equal Sum Subsets</title><link>https://snow-ham1949.github.io/posts/leetcode-698-partition-to-k-equal-sum-subsets/</link><pubDate>Wed, 13 Jul 2022 18:17:01 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/leetcode-698-partition-to-k-equal-sum-subsets/</guid><description>好像比較了解 bit manipulation 可以幹嘛了（？） 題目 link 做法 這題是 這題 的進化版（？），要分成 $k$ 堆，一樣可以用 bit + dp 做，然後這邊還有一個小技巧是直接用餘數，這樣</description></item><item><title>Leetcode 473. Matchsticks to Square</title><link>https://snow-ham1949.github.io/posts/leetcode-473-matchsticks-to-square/</link><pubDate>Tue, 12 Jul 2022 23:20:53 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/leetcode-473-matchsticks-to-square/</guid><description>不會 dp 也不會 bit manipulation QAQ 題目 link 作法 dfs 一個最簡單的做法可以直接 recursion, code 如下 class Solution { public: bool chk(vector&amp;lt;int&amp;gt;&amp;amp; side, vector&amp;lt;int&amp;gt;&amp;amp; matches, int id, int n) { if (id == n) { return side[0] == side[1] and side[1] == side[2] and side[2] == side[3]; } for (int i = 0; i &amp;lt;</description></item><item><title>frontend 學習筆記 - organizing js</title><link>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-organizing-js/</link><pubDate>Tue, 12 Jul 2022 13:23:03 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-organizing-js/</guid><description>creating object 定義物件的時候用 object literal syntax 較好，這個的意思是把 property 跟 value 用類似 array 的方式來寫，例如說 const myObject = { property: &amp;#39;Value!&amp;#39;, otherProperty: 77, &amp;#34;obnoxious property&amp;#34;: function() { // do stuff! } } 可以用 dot notation 或者 bracket notation 拿資料 // dot</description></item><item><title>frontend 學習筆記 - grid</title><link>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-grid/</link><pubDate>Sun, 10 Jul 2022 15:03:48 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-grid/</guid><description>grid 是什麼 一種 display 的方法，可以 display grid （廢話） 常用 property &amp;amp; function grid-template-columns、grid-template-rows: 設定有幾行</description></item><item><title>Leetcode 1696. Jump Game VI</title><link>https://snow-ham1949.github.io/posts/leetcode-1696-jump-game-vi/</link><pubDate>Sun, 10 Jul 2022 00:19:10 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/leetcode-1696-jump-game-vi/</guid><description>題目 link 作法 令 dp[i] 為以 $i$ 為起點到終點能獲得的最大分數。如果枚舉可以走的範圍內最大的話複雜度會是 $O(nk)$ 會 TLE，所以可以用 deque 或是 priority_queue 來優化，維護一個可以</description></item><item><title>frontend 學習筆記 - form</title><link>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-form/</link><pubDate>Fri, 08 Jul 2022 14:08:29 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-form/</guid><description>建立 form 範例 code &amp;lt;form&amp;gt; action: 後面要放的是 url，代筆要送資料去處理的地方 method: 送這個 form 的 http request method &amp;lt;input&amp;gt; type: 輸入的形式，可以是 radio: 圓圓的選擇按鍵 checked: 預設選起來的選項 checkbox: 可以</description></item><item><title>Leetcode 32. Longest Valid Parentheses</title><link>https://snow-ham1949.github.io/posts/leetcode-32-longest-valid-parentheses/</link><pubDate>Thu, 07 Jul 2022 21:17:42 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/leetcode-32-longest-valid-parentheses/</guid><description>我真的不會 dp QwQ 題目 link 作法 可以先從基礎題開始想，就是判合法括號字串，這個用 stack 就可以解決（其實這題也可，但我想練 dp），從這個的想法出發的話，可</description></item><item><title>frontend 學習筆記 - more on css</title><link>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-more-on-css/</link><pubDate>Tue, 05 Jul 2022 19:22:15 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-more-on-css/</guid><description>Browser default style 每個瀏覽器會有自己的 default style，所以網路上有開源的 .css 讓開發者們用，可以 undo browser default style 然後根據自己的規則在不同的瀏覽器上顯示一樣的東西 常用的</description></item><item><title>frontend 學習筆記</title><link>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</link><pubDate>Fri, 01 Jul 2022 16:50:25 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</guid><description>html tag 們可以參考 這裡 table tag 簡單來說就是可以生成表格的 tag &amp;lt;tr&amp;gt;: table row，包在這個裡面的會形成一個 row &amp;lt;td&amp;gt;: table data，就是放格子中要填的 data &amp;lt;th&amp;gt;: table header，</description></item><item><title>frontend 學習筆記 - js</title><link>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-js/</link><pubDate>Sun, 26 Jun 2022 15:05:15 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-js/</guid><description>寫在網頁裡的方法 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script&amp;gt; // Your JavaScript goes here! console.log(&amp;#34;Hello, World!&amp;#34;) &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 或者 &amp;lt;script src=&amp;#34;javascript.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; Variable 宣告 let 是一般變數，const是常數變數 用駝峰式命名法（const 的話全部</description></item><item><title>frontend 學習筆記 - flexbox</title><link>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-flexbox/</link><pubDate>Sat, 25 Jun 2022 13:10:13 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-flexbox/</guid><description>flexbox 是什麼 應該是個切版好工具？大概的功能是讓 element 可以併排，而不是 stacking 或者 centering。 例子可以看 這裡 分類 flex container flex item 外容器 在 flex container 中的 item display, flex-flow(direction &amp;amp; wrap), justify-content,</description></item><item><title>Leetcode 1354. Construct Target Array With Multiple Sums</title><link>https://snow-ham1949.github.io/posts/leetcode-1354-construct-target-array-with-multiple-sums/</link><pubDate>Fri, 24 Jun 2022 20:55:17 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/leetcode-1354-construct-target-array-with-multiple-sums/</guid><description>題目 link 作法 我是看 hint 才會的 QQ，hint 就是這題其實要反著做，就是說如果 target array 是可以被構造出來的話，逆推回去就應該是對的。 作法是把最大值一個一個</description></item><item><title>frontend 學習筆記 - css</title><link>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-css/</link><pubDate>Fri, 24 Jun 2022 13:10:30 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-css/</guid><description>基礎架構 &amp;lt;selector&amp;gt; { &amp;lt;property&amp;gt;: &amp;lt;value&amp;gt;; } selector universal selector * { color: purple; } type selector div { color: white; } class selector &amp;lt;div class=&amp;#34;alert-text severe-alert&amp;#34;&amp;gt; Please agree to our terms of service. &amp;lt;/div&amp;gt; .alert-text { color: red; } id selector &amp;lt;div id=&amp;#34;title&amp;#34;&amp;gt;My Awesome 90&amp;#39;s Page&amp;lt;/div&amp;gt; #title { background-color: red; } difference between class &amp;amp; ID The major difference between classes and IDs is that an element</description></item><item><title>frontend 學習筆記 - html</title><link>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-html/</link><pubDate>Tue, 21 Jun 2022 21:26:41 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-html/</guid><description>學習網站 link html &amp;lt;title&amp;gt; &amp;lt;/title&amp;gt; : 網頁標題 &amp;lt;p&amp;gt; &amp;lt;/p&amp;gt;: 網站內容中的文章 tag &amp;lt;h1&amp;gt; &amp;lt;/h1&amp;gt;: 標題字，有 h1~h6 &amp;lt;strong&amp;gt; &amp;lt;/strong&amp;gt;: 粗體 &amp;lt;em&amp;gt; &amp;lt;/em&amp;gt;: 斜體 &amp;lt;!-- comment --&amp;gt; list unordered list &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Item 1&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Item 2&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Item 3&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; ordered list &amp;lt;ol&amp;gt; &amp;lt;li&amp;gt;Item 1&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Item 2&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Item 3&amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;a href=&amp;quot;url&amp;quot;&amp;gt; &amp;lt;/a&amp;gt;: 超連結</description></item><item><title>verilog 學習筆記</title><link>https://snow-ham1949.github.io/posts/verilog-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</link><pubDate>Sat, 18 Jun 2022 14:08:36 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/verilog-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</guid><description>基礎語法 module module &amp;lt;module name&amp;gt;(&amp;lt;parameters&amp;gt;); // module content endmodule assign assign out = in; gate and &amp;amp; or | not ~ xor ^ wire wire w1, w2, w3; 多進制表示 &amp;lt;位元長度&amp;gt; ’ &amp;lt;進制表示&amp;gt; &amp;lt;數值資料&amp;</description></item><item><title>Google Android Study Jam 學習筆記(6)</title><link>https://snow-ham1949.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-6/</link><pubDate>Fri, 17 Jun 2022 00:16:03 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-6/</guid><description>學習範圍 單元 5、單元 6、Jetpack SQL 語法 statement SELECT name FROM park WHERE type != &amp;#34;recreation_area&amp;#34; AND area_acres &amp;gt; 100000 function SELECT COUNT(*) FROM park SELECT SUM(park_visitors) FROM park SELECT MAX(area_acres) FROM park SELECT COUNT(DISTINCT type) FROM park ordering &amp;amp; grouping /* sort by descending order*/ SELECT name FROM park ORDER BY name DESC /*</description></item><item><title>Google Android Study Jam 學習筆記(5)</title><link>https://snow-ham1949.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-5/</link><pubDate>Wed, 15 Jun 2022 19:56:39 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-5/</guid><description>學習範圍 單元 4 Kotlin 語法 thread runBlocking{}、.async() lazy instantiation @Json Annotation let 將最後一行帶到下一個 chain 或是回傳 Scope Function Android Studio debugger</description></item><item><title>Google Android Study Jam 學習筆記(4)</title><link>https://snow-ham1949.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-4/</link><pubDate>Tue, 14 Jun 2022 18:37:11 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-4/</guid><description>學習範圍 單元 3 課程 2~5 Android Studio fragment 一種可以重複利用的 UI - Navigation NavHostFragment: container for destinations NavController: conducts navigation NavigationView: menu of drawerlayout NavigationUI: update content outside NavHostFragment Navgraph app 中導覽的對應 ex. 從 Home -&amp;gt; Setting 結構準則 separation of concerns driving UI from a model main classes / components</description></item><item><title>Google Android Study Jam 學習筆記(3)</title><link>https://snow-ham1949.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-3/</link><pubDate>Mon, 13 Jun 2022 21:57:59 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-3/</guid><description>學習範圍 單元 3 課程 1 Kotlin 語法 Set val tmp = &amp;lt;list&amp;gt;.toSet() val set1 = setOf(1,2,3) val set2 = mutableSetOf(3,2,1) 可以用 contains()、intersect()、union() Map fun main() { val peopleAges = mutableMapOf&amp;lt;String, Int&amp;gt;( &amp;#34;Fred&amp;#34; to</description></item><item><title>Google Android Study Jam 學習筆記(2)</title><link>https://snow-ham1949.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-2/</link><pubDate>Sat, 11 Jun 2022 12:30:51 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-2/</guid><description>學習範圍 單元 2 課程 3 Kotlin 語法 list list 宣告 val numbers: List&amp;lt;Int&amp;gt; = listOf(1, 2, 3, 4, 5, 6) 其他 println(&amp;#34;List: $numbers&amp;#34;) // = println(&amp;#34;List: &amp;#34; + numbers) println(&amp;#34;Size: ${numbers.size}&amp;#34;) println(&amp;#34;First element: ${numbers[0]}&amp;#34;) println(&amp;#34;First: ${numbers.first()}&amp;#34;) println(&amp;#34;Last: ${numbers.last()}&amp;#34;) println(&amp;#34;Contains 4? ${numbers.contains(4)}&amp;#34;) // true println(&amp;#34;Contains 7? ${numbers.contains(7)}&amp;#34;) // false println(&amp;#34;Reversed list: ${colors.reversed()}&amp;#34;) println(&amp;#34;Sorted list: ${colors.sorted()}&amp;#34;) mutablelist 宣告 val entrees = mutableListOf&amp;lt;String&amp;gt;() //</description></item><item><title>Google Andriod Study Jam 學習筆記(1)</title><link>https://snow-ham1949.github.io/posts/google-andriod-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-1/</link><pubDate>Fri, 10 Jun 2022 21:10:46 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/google-andriod-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-1/</guid><description>學習範圍 單元 1 ~ 單元 2 課程 2 Kotlin 語法 函式 fun &amp;lt;function name&amp;gt; : &amp;lt;return type&amp;gt; { } 輸出 println(&amp;#34;Hi&amp;#34;) // 有換行 print(&amp;#34;Hi&amp;#34;) // 沒換行 宣告變數 val &amp;lt;variable name&amp;gt; = &amp;lt;variable value&amp;gt; val &amp;lt;variable name&amp;gt; = &amp;lt;class name&amp;gt;(parameter) 迴圈 repeat (&amp;lt;times&amp;gt;) { } class class &amp;lt;class name&amp;gt; (val &amp;lt;variable name&amp;gt;: &amp;lt;variable type&amp;gt;,</description></item><item><title>110-2 修課心得</title><link>https://snow-ham1949.github.io/posts/110-2-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</link><pubDate>Tue, 07 Jun 2022 16:34:38 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/110-2-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</guid><description>修的課程 資訊系必修：作業系統、資料結構與演算法 資訊系選修：多媒體安全、離散數學 通識：醫學與生活 已經爆掉的一般選修：機器學習 作業系統 開課教授：</description></item><item><title>CSES Round Trip</title><link>https://snow-ham1949.github.io/posts/cses-round-trip/</link><pubDate>Sun, 27 Feb 2022 22:41:56 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/cses-round-trip/</guid><description>我一直以為我會找環欸，結果其實是我會找但要印出來就不會，我就笨 :p 題目 link 找圖中隨便一個環然後印路徑，如果沒有就輸出 IMPOSSIBLE。 作法 就</description></item><item><title>Leetcode 96. Unique Binary Search Trees</title><link>https://snow-ham1949.github.io/posts/leetcode-96-unique-binary-search-trees/</link><pubDate>Sat, 12 Feb 2022 19:13:27 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/leetcode-96-unique-binary-search-trees/</guid><description>忘記數學了所以來複習一下 :p 題目 link 作法 如果假設有 $n$ 個節點的二元樹有 $G_n$ 個，其中以 $i$ 節點為根的數目有 $F_i$ 個，那麼 $$ G_n = F_1 + F_2 + &amp;hellip; + F_n$$ 根據二元樹的定義</description></item><item><title>Leetcode 45. Jump Game II</title><link>https://snow-ham1949.github.io/posts/leetcode-45-jump-game-ii/</link><pubDate>Fri, 04 Feb 2022 17:26:23 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/leetcode-45-jump-game-ii/</guid><description>寒假因為很無聊就來刷題，絕對不是因為我很廢 :p 題目 link 作法 我是先想到 $O(n^2)$ 的做法，對於每個位置 $i$ 都去看前面的位置 $j$ 能不能走得更遠，如果可以的話就把 $i$</description></item><item><title>110-1 修課心得</title><link>https://snow-ham1949.github.io/posts/110-1-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</link><pubDate>Wed, 26 Jan 2022 21:23:04 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/110-1-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</guid><description>修的課程 資訊系必修：計算機程式設計、演算法設計與分析、線性代數 資訊系選修：計算機概論 通識：現代生物學之應用 學程必修：神經生物與認知科學專題討</description></item></channel></rss>