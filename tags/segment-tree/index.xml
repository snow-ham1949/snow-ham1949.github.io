<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Segment Tree on 隨寫日誌</title><link>https://snow-ham1949.github.io/tags/segment-tree/</link><description>Recent content in Segment Tree on 隨寫日誌</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Erin Li</copyright><lastBuildDate>Sat, 17 Sep 2022 23:13:51 +0000</lastBuildDate><atom:link href="https://snow-ham1949.github.io/tags/segment-tree/index.xml" rel="self" type="application/rss+xml"/><item><title>CSES Hotel Queries</title><link>https://snow-ham1949.github.io/posts/cses-hotel-queries/</link><pubDate>Sat, 17 Sep 2022 23:13:51 +0000</pubDate><guid>https://snow-ham1949.github.io/posts/cses-hotel-queries/</guid><description>題目 給一個序列 $a$，對於每個詢問 $x$ 找到最小的 $i$ 使得 $a[i] &amp;gt;= x$，並將 $a[i] -= x$。
作法 這題要用到的技巧是線段樹二分搜。
線段樹的每個節點可以存「節點包含的區間內最大的數」，所以對於每個詢問 $x$，我都可以去看是下面哪個 case
左子樹的最大值 $&amp;gt;= x$ -&amp;gt; 往左子樹遞迴查詢 右子樹的最大值 $&amp;gt;= x$ -&amp;gt; 往右子樹遞迴查詢 都小於 -&amp;gt; 答案 $= 0$ 實作就看 code
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; typedef pair&amp;lt;int, int&amp;gt; pii; typedef pair&amp;lt;ll, ll&amp;gt; pll; const int mxn = 2e5 + 5; int ans; struct Seg { ll seg[mxn &amp;lt;&amp;lt; 2], a[mxn]; void pullup(int id) { seg[id] = max(seg[id &amp;lt;&amp;lt; 1] , seg[id &amp;lt;&amp;lt; 1 | 1]); } void build(int l, int r, int id = 1) { if (l == r) { seg[id] = a[l]; return; } int mid = (l + r) &amp;gt;&amp;gt; 1; build(l, mid, id &amp;lt;&amp;lt; 1); build(mid + 1, r, id &amp;lt;&amp;lt; 1 | 1); pullup(id); } void bs(int l, int r, ll val, int id = 1) { // binary search on segment tree if (l == r) { if (seg[id] &amp;gt;= val) ans = l; seg[id] -= val; return; } int mid = (l + r) &amp;gt;&amp;gt; 1; if (seg[id &amp;lt;&amp;lt; 1] &amp;gt;= val) bs(l, mid, val, id &amp;lt;&amp;lt; 1); else if (seg[id &amp;lt;&amp;lt; 1 | 1] &amp;gt;= val) bs(mid + 1, r, val, id &amp;lt;&amp;lt; 1 | 1); pullup(id); } } seg; void solve() { int n, q; cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; q; for (int i = 1; i &amp;lt;= n; i++) cin &amp;gt;&amp;gt; seg.</description></item></channel></rss>